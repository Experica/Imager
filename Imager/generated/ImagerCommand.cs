//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ImagerCommand.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Imager
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Command : global::Ice.Object, CommandOperations_
    {
    }
}

namespace Imager
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_getRecordPath(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_setRecordPath(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_getDataFormat(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_setDataFormat(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_getIsAcquisiting(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_setIsAcquisiting(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_getIsRecording(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_setIsRecording(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_StartRecordAndAcquisite(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Command_StopAcquisiteAndRecord(bool ret);
}

namespace Imager
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CommandPrx : global::Ice.ObjectPrx
    {
        string getRecordPath(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> getRecordPathAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_getRecordPath> begin_getRecordPath(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getRecordPath(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getRecordPath(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_getRecordPath(global::Ice.AsyncResult asyncResult);

        bool setRecordPath(string path, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> setRecordPathAsync(string path, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_setRecordPath> begin_setRecordPath(string path, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setRecordPath(string path, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setRecordPath(string path, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_setRecordPath(global::Ice.AsyncResult asyncResult);

        string getDataFormat(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> getDataFormatAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_getDataFormat> begin_getDataFormat(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDataFormat(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDataFormat(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_getDataFormat(global::Ice.AsyncResult asyncResult);

        bool setDataFormat(string format, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> setDataFormatAsync(string format, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_setDataFormat> begin_setDataFormat(string format, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setDataFormat(string format, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setDataFormat(string format, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_setDataFormat(global::Ice.AsyncResult asyncResult);

        bool getIsAcquisiting(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> getIsAcquisitingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_getIsAcquisiting> begin_getIsAcquisiting(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getIsAcquisiting(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getIsAcquisiting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_getIsAcquisiting(global::Ice.AsyncResult asyncResult);

        bool setIsAcquisiting(bool isacquisiting, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> setIsAcquisitingAsync(bool isacquisiting, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_setIsAcquisiting> begin_setIsAcquisiting(bool isacquisiting, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setIsAcquisiting(bool isacquisiting, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setIsAcquisiting(bool isacquisiting, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_setIsAcquisiting(global::Ice.AsyncResult asyncResult);

        bool getIsRecording(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> getIsRecordingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_getIsRecording> begin_getIsRecording(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getIsRecording(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getIsRecording(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_getIsRecording(global::Ice.AsyncResult asyncResult);

        bool setIsRecording(bool isrecording, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> setIsRecordingAsync(bool isrecording, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_setIsRecording> begin_setIsRecording(bool isrecording, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setIsRecording(bool isrecording, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setIsRecording(bool isrecording, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_setIsRecording(global::Ice.AsyncResult asyncResult);

        bool StartRecordAndAcquisite(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> StartRecordAndAcquisiteAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_StartRecordAndAcquisite> begin_StartRecordAndAcquisite(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_StartRecordAndAcquisite(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_StartRecordAndAcquisite(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_StartRecordAndAcquisite(global::Ice.AsyncResult asyncResult);

        bool StopAcquisiteAndRecord(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> StopAcquisiteAndRecordAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Command_StopAcquisiteAndRecord> begin_StopAcquisiteAndRecord(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_StopAcquisiteAndRecord(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_StopAcquisiteAndRecord(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_StopAcquisiteAndRecord(global::Ice.AsyncResult asyncResult);
    }
}

namespace Imager
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CommandOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string getRecordPath(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool setRecordPath(string path, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string getDataFormat(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool setDataFormat(string format, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool getIsAcquisiting(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool setIsAcquisiting(bool isacquisiting, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool getIsRecording(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool setIsRecording(bool isrecording, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool StartRecordAndAcquisite(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool StopAcquisiteAndRecord(global::Ice.Current current = null);
    }
}

namespace Imager
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class CommandPrxHelper : global::Ice.ObjectPrxHelperBase, CommandPrx
    {
        public CommandPrxHelper()
        {
        }

        public CommandPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string getRecordPath(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getRecordPathAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool setRecordPath(string path, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setRecordPathAsync(path, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string getDataFormat(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDataFormatAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool setDataFormat(string format, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setDataFormatAsync(format, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool getIsAcquisiting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getIsAcquisitingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool setIsAcquisiting(bool isacquisiting, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setIsAcquisitingAsync(isacquisiting, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool getIsRecording(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getIsRecordingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool setIsRecording(bool isrecording, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setIsRecordingAsync(isrecording, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool StartRecordAndAcquisite(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_StartRecordAndAcquisiteAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool StopAcquisiteAndRecord(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_StopAcquisiteAndRecordAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getRecordPathAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getRecordPathAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getRecordPathAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getRecordPath_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getRecordPath(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getRecordPath_name = "getRecordPath";

        private void _iceI_getRecordPath(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getRecordPath_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> setRecordPathAsync(string path, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setRecordPathAsync(path, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_setRecordPathAsync(string iceP_path, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setRecordPath_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_setRecordPath(iceP_path, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setRecordPath_name = "setRecordPath";

        private void _iceI_setRecordPath(string iceP_path, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _setRecordPath_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_path);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> getDataFormatAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDataFormatAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getDataFormatAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDataFormat_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getDataFormat(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDataFormat_name = "getDataFormat";

        private void _iceI_getDataFormat(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getDataFormat_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> setDataFormatAsync(string format, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setDataFormatAsync(format, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_setDataFormatAsync(string iceP_format, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setDataFormat_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_setDataFormat(iceP_format, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setDataFormat_name = "setDataFormat";

        private void _iceI_setDataFormat(string iceP_format, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _setDataFormat_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_format);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> getIsAcquisitingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getIsAcquisitingAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_getIsAcquisitingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getIsAcquisiting_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_getIsAcquisiting(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getIsAcquisiting_name = "getIsAcquisiting";

        private void _iceI_getIsAcquisiting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _getIsAcquisiting_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> setIsAcquisitingAsync(bool isacquisiting, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setIsAcquisitingAsync(isacquisiting, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_setIsAcquisitingAsync(bool iceP_isacquisiting, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setIsAcquisiting_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_setIsAcquisiting(iceP_isacquisiting, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setIsAcquisiting_name = "setIsAcquisiting";

        private void _iceI_setIsAcquisiting(bool iceP_isacquisiting, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _setIsAcquisiting_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_isacquisiting);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> getIsRecordingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getIsRecordingAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_getIsRecordingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getIsRecording_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_getIsRecording(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getIsRecording_name = "getIsRecording";

        private void _iceI_getIsRecording(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _getIsRecording_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> setIsRecordingAsync(bool isrecording, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setIsRecordingAsync(isrecording, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_setIsRecordingAsync(bool iceP_isrecording, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setIsRecording_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_setIsRecording(iceP_isrecording, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setIsRecording_name = "setIsRecording";

        private void _iceI_setIsRecording(bool iceP_isrecording, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _setIsRecording_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_isrecording);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> StartRecordAndAcquisiteAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_StartRecordAndAcquisiteAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_StartRecordAndAcquisiteAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_StartRecordAndAcquisite_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_StartRecordAndAcquisite(context, synchronous, completed);
            return completed.Task;
        }

        private const string _StartRecordAndAcquisite_name = "StartRecordAndAcquisite";

        private void _iceI_StartRecordAndAcquisite(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _StartRecordAndAcquisite_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> StopAcquisiteAndRecordAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_StopAcquisiteAndRecordAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_StopAcquisiteAndRecordAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_StopAcquisiteAndRecord_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_StopAcquisiteAndRecord(context, synchronous, completed);
            return completed.Task;
        }

        private const string _StopAcquisiteAndRecord_name = "StopAcquisiteAndRecord";

        private void _iceI_StopAcquisiteAndRecord(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _StopAcquisiteAndRecord_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Command_getRecordPath> begin_getRecordPath(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getRecordPath(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getRecordPath(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getRecordPath(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getRecordPath(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getRecordPath(context, callback, cookie, false);
        }

        public string end_getRecordPath(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getRecordPath_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_getRecordPath> begin_getRecordPath(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getRecordPath_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_getRecordPath, string>(
                (Callback_Command_getRecordPath cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getRecordPath_name, cookie, completedCallback);
            _iceI_getRecordPath(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_setRecordPath> begin_setRecordPath(string path, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setRecordPath(path, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setRecordPath(string path, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setRecordPath(path, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setRecordPath(string path, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setRecordPath(path, context, callback, cookie, false);
        }

        public bool end_setRecordPath(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setRecordPath_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_setRecordPath> begin_setRecordPath(string iceP_path, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setRecordPath_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_setRecordPath, bool>(
                (Callback_Command_setRecordPath cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setRecordPath_name, cookie, completedCallback);
            _iceI_setRecordPath(iceP_path, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_getDataFormat> begin_getDataFormat(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDataFormat(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDataFormat(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataFormat(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDataFormat(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataFormat(context, callback, cookie, false);
        }

        public string end_getDataFormat(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDataFormat_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_getDataFormat> begin_getDataFormat(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDataFormat_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_getDataFormat, string>(
                (Callback_Command_getDataFormat cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDataFormat_name, cookie, completedCallback);
            _iceI_getDataFormat(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_setDataFormat> begin_setDataFormat(string format, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setDataFormat(format, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setDataFormat(string format, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setDataFormat(format, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setDataFormat(string format, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setDataFormat(format, context, callback, cookie, false);
        }

        public bool end_setDataFormat(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setDataFormat_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_setDataFormat> begin_setDataFormat(string iceP_format, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setDataFormat_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_setDataFormat, bool>(
                (Callback_Command_setDataFormat cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setDataFormat_name, cookie, completedCallback);
            _iceI_setDataFormat(iceP_format, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_getIsAcquisiting> begin_getIsAcquisiting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getIsAcquisiting(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getIsAcquisiting(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIsAcquisiting(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getIsAcquisiting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIsAcquisiting(context, callback, cookie, false);
        }

        public bool end_getIsAcquisiting(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIsAcquisiting_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_getIsAcquisiting> begin_getIsAcquisiting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getIsAcquisiting_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_getIsAcquisiting, bool>(
                (Callback_Command_getIsAcquisiting cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getIsAcquisiting_name, cookie, completedCallback);
            _iceI_getIsAcquisiting(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_setIsAcquisiting> begin_setIsAcquisiting(bool isacquisiting, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setIsAcquisiting(isacquisiting, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setIsAcquisiting(bool isacquisiting, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setIsAcquisiting(isacquisiting, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setIsAcquisiting(bool isacquisiting, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setIsAcquisiting(isacquisiting, context, callback, cookie, false);
        }

        public bool end_setIsAcquisiting(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setIsAcquisiting_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_setIsAcquisiting> begin_setIsAcquisiting(bool iceP_isacquisiting, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setIsAcquisiting_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_setIsAcquisiting, bool>(
                (Callback_Command_setIsAcquisiting cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setIsAcquisiting_name, cookie, completedCallback);
            _iceI_setIsAcquisiting(iceP_isacquisiting, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_getIsRecording> begin_getIsRecording(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getIsRecording(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getIsRecording(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIsRecording(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getIsRecording(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIsRecording(context, callback, cookie, false);
        }

        public bool end_getIsRecording(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIsRecording_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_getIsRecording> begin_getIsRecording(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getIsRecording_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_getIsRecording, bool>(
                (Callback_Command_getIsRecording cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getIsRecording_name, cookie, completedCallback);
            _iceI_getIsRecording(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_setIsRecording> begin_setIsRecording(bool isrecording, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setIsRecording(isrecording, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setIsRecording(bool isrecording, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setIsRecording(isrecording, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setIsRecording(bool isrecording, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setIsRecording(isrecording, context, callback, cookie, false);
        }

        public bool end_setIsRecording(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setIsRecording_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_setIsRecording> begin_setIsRecording(bool iceP_isrecording, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setIsRecording_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_setIsRecording, bool>(
                (Callback_Command_setIsRecording cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setIsRecording_name, cookie, completedCallback);
            _iceI_setIsRecording(iceP_isrecording, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_StartRecordAndAcquisite> begin_StartRecordAndAcquisite(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_StartRecordAndAcquisite(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_StartRecordAndAcquisite(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_StartRecordAndAcquisite(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_StartRecordAndAcquisite(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_StartRecordAndAcquisite(context, callback, cookie, false);
        }

        public bool end_StartRecordAndAcquisite(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _StartRecordAndAcquisite_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_StartRecordAndAcquisite> begin_StartRecordAndAcquisite(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_StartRecordAndAcquisite_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_StartRecordAndAcquisite, bool>(
                (Callback_Command_StartRecordAndAcquisite cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _StartRecordAndAcquisite_name, cookie, completedCallback);
            _iceI_StartRecordAndAcquisite(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Command_StopAcquisiteAndRecord> begin_StopAcquisiteAndRecord(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_StopAcquisiteAndRecord(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_StopAcquisiteAndRecord(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_StopAcquisiteAndRecord(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_StopAcquisiteAndRecord(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_StopAcquisiteAndRecord(context, callback, cookie, false);
        }

        public bool end_StopAcquisiteAndRecord(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _StopAcquisiteAndRecord_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Command_StopAcquisiteAndRecord> begin_StopAcquisiteAndRecord(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_StopAcquisiteAndRecord_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Command_StopAcquisiteAndRecord, bool>(
                (Callback_Command_StopAcquisiteAndRecord cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _StopAcquisiteAndRecord_name, cookie, completedCallback);
            _iceI_StopAcquisiteAndRecord(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CommandPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CommandPrx r = b as CommandPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CommandPrxHelper h = new CommandPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CommandPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CommandPrx r = b as CommandPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CommandPrxHelper h = new CommandPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CommandPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CommandPrxHelper h = new CommandPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CommandPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CommandPrxHelper h = new CommandPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CommandPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CommandPrx r = b as CommandPrx;
            if(r == null)
            {
                CommandPrxHelper h = new CommandPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CommandPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CommandPrxHelper h = new CommandPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Imager::Command"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CommandPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CommandPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CommandPrxHelper result = new CommandPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Imager
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class CommandDisp_ : global::Ice.ObjectImpl, Command
    {
        #region Slice operations

        public abstract string getRecordPath(global::Ice.Current current = null);

        public abstract bool setRecordPath(string path, global::Ice.Current current = null);

        public abstract string getDataFormat(global::Ice.Current current = null);

        public abstract bool setDataFormat(string format, global::Ice.Current current = null);

        public abstract bool getIsAcquisiting(global::Ice.Current current = null);

        public abstract bool setIsAcquisiting(bool isacquisiting, global::Ice.Current current = null);

        public abstract bool getIsRecording(global::Ice.Current current = null);

        public abstract bool setIsRecording(bool isrecording, global::Ice.Current current = null);

        public abstract bool StartRecordAndAcquisite(global::Ice.Current current = null);

        public abstract bool StopAcquisiteAndRecord(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Imager::Command"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getRecordPath(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getRecordPath(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setRecordPath(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_path;
            iceP_path = istr.readString();
            inS.endReadParams();
            var ret = obj.setRecordPath(iceP_path, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDataFormat(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getDataFormat(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setDataFormat(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_format;
            iceP_format = istr.readString();
            inS.endReadParams();
            var ret = obj.setDataFormat(iceP_format, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getIsAcquisiting(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getIsAcquisiting(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setIsAcquisiting(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_isacquisiting;
            iceP_isacquisiting = istr.readBool();
            inS.endReadParams();
            var ret = obj.setIsAcquisiting(iceP_isacquisiting, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getIsRecording(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getIsRecording(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setIsRecording(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_isrecording;
            iceP_isrecording = istr.readBool();
            inS.endReadParams();
            var ret = obj.setIsRecording(iceP_isrecording, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_StartRecordAndAcquisite(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.StartRecordAndAcquisite(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_StopAcquisiteAndRecord(Command obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.StopAcquisiteAndRecord(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "StartRecordAndAcquisite",
            "StopAcquisiteAndRecord",
            "getDataFormat",
            "getIsAcquisiting",
            "getIsRecording",
            "getRecordPath",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "setDataFormat",
            "setIsAcquisiting",
            "setIsRecording",
            "setRecordPath"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_StartRecordAndAcquisite(this, inS, current);
                }
                case 1:
                {
                    return iceD_StopAcquisiteAndRecord(this, inS, current);
                }
                case 2:
                {
                    return iceD_getDataFormat(this, inS, current);
                }
                case 3:
                {
                    return iceD_getIsAcquisiting(this, inS, current);
                }
                case 4:
                {
                    return iceD_getIsRecording(this, inS, current);
                }
                case 5:
                {
                    return iceD_getRecordPath(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return iceD_setDataFormat(this, inS, current);
                }
                case 11:
                {
                    return iceD_setIsAcquisiting(this, inS, current);
                }
                case 12:
                {
                    return iceD_setIsRecording(this, inS, current);
                }
                case 13:
                {
                    return iceD_setRecordPath(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
